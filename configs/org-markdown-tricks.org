* Org Markdown Tricks
** Org Markdown Export Tricks

Sometimes I want to export markdown that is going to be interpreted by something that:
- Doesn't understand HTML
- Prefers using =```= to denote code blocks, rather than using indentation.

These functions remove extra HTML anchor blocks that org adds to the
markdown, and change the code snippit style from indentation to =```=
style.

#+begin_src emacs-lisp
  (defun gds-md-remove-section-anchors ()
    (beginning-of-buffer)
    (replace-regexp "^<a id=\"org.*$" ""))

  (defun gds-md-find-next-code-block ()
    (if (search-forward-regexp "^
      [^-]" nil t)
        (progn
          (beginning-of-line)
          t)
      nil))

  (defun gds-md-find-end-of-current-code-block ()
    (search-forward-regexp "^
  [^ ]")
    (beginning-of-line)
    (previous-line))

  (defun gds-md-simplify-code-blocks ()
    (beginning-of-buffer)
    (while (gds-md-find-next-code-block)
      (insert "```
  ")
      (gds-md-find-end-of-current-code-block)
      (insert "```
  ")))

  (defun gds-md-simplify-entities ()
    (beginning-of-buffer)
    (replace-string "&#x2013;" "--")
    (beginning-of-buffer)
    (replace-string "&#x2026;" "..."))

  (defun gds-simplify-markdown ()
    (interactive)
    (gds-md-remove-section-anchors)
    (gds-md-simplify-entities)
    (gds-md-simplify-code-blocks))
#+end_src

#+RESULTS:
: gds-simplify-markdown

** Org Markdown import(ish) tricks

Suppose you've copy-pasted some markdown into an org-document. Most of
the markup works just fine. You'll need to do a search-replace to turn
the =#= headings into =*= headings, but that's ok.

Making hyperlinks work is a bit more annoying though, because org puts
the URL first, and markdown puts it last.

#+begin_src emacs-lisp
  (defun gds-orgify-next-md-link ()
    (interactive)
    (search-forward "[")
    ;; In the string:
    ;; blah blah [link text](link address)
    ;;            ^ we are here
    (let
        ((beginning-of-link-text (point)))
      ;; blah blah [link text](link address)
      ;;            ^ this is beginning-of-link-text
      (backward-char)
      (forward-sexp)
      ;; blah blah [link text](link address)
      ;;            ^ this is beginning-of-link-text
      ;;                      ^ we are here
      (let ((link-text (buffer-substring beginning-of-link-text (- (point) 1))))
        (delete-region (- beginning-of-link-text 1) (point))
        ;; blah blah (link address)
        ;;            ^ this is beginning-of-link-text
        ;;           ^ we are here
        (forward-sexp)
        (backward-char)
        ;; blah blah (link address)
        ;;            ^ this is beginning-of-link-text
        ;;                        ^ we are here
        (delete-char 1)
        (insert "][" link-text "]]")
        ;; blah blah (link address][link text]]
        ;;            ^ this is beginning-of-link-text
        ;;                                      ^ we are here
        (goto-char (- beginning-of-link-text 1))
        ;; blah blah (link address][link text]]
        ;;            ^ this is beginning-of-link-text
        ;;           ^ we are here
        (delete-char 1)
        (insert "[[")
        ;; blah blah [[link address][link text]]
        ;;            ^ this is beginning-of-link-text
        ;;             ^ we are here
        )))
#+end_src

#+RESULTS:
: gds-orgify-next-md-link
