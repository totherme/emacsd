* Internetting

  For those that like the UI emacs provides (or perhaps just enjoy the
  uniformity of using the same UI for programming and for everything
  else), emacs can be used to chat on slack, read email, and do
  various other internettey things.

  Here are some of them:
  - [[*SSH Keys][SSH Keys]]
    - I keep my github ssh keys in lastpass, and access them with ~M-x
      gds-load-github-keys~.
  - [[*Slack][Slack]]
  - [[*Email][Email]]
  - [[*Trello][Trello]]

  For details on how those things work, and what lastpass entries you
  need to create in order to make them work for you, see below.

**** Prerequisites
     :PROPERTIES:
     :ID:       8738ce15-3281-4cca-9198-ae6e37fd57c6
     :END:
     A lot of the elisp in this file requires lexical binding. We should
     enable it up front, before getting into the meat of things.
     #+BEGIN_SRC emacs-lisp
       ;;; -*- lexical-binding: t -*-
     #+END_SRC

** Blogging
   :PROPERTIES:
   :ID:       983547e1-5b1d-4e37-bbec-c494d2af7db6
   :END:
   I've heard good things about [[https://github.com/bastibe/org-static-blog/][org-static-blog]].
   #+begin_src emacs-lisp
     (use-package org-static-blog
       :ensure t
       :config
       (let ((blog-config "~/workspace/kindnesscity/org-static-blog-config.el"))
         (if (file-exists-p blog-config)
             (load-file blog-config))))
   #+end_src

** IRC
   :PROPERTIES:
   :ID:       8833e16e-6b1b-468f-8354-df3c44a83400
   :END:
   Emacs comes with [[info:erc#Top][ERC]] built in.

   I like to store my nickserv passwords in an encrypted
   =~/.authinfo.gpg= file, so I don't want ERC to prompt for
   passwords.

   #+begin_src emacs-lisp
     (setq erc-prompt-for-password nil)
   #+end_src

** SSH Keys
   :PROPERTIES:
   :ID:       6b577bff-8fa1-4077-b6eb-46dae361bfc2
   :END:
   A lot of the things I work on are stored in github repos. While
   emacs can manage local clones of those repos out-of-the-box, if I
   want to be able to push, I'll need to load my creds.

   To make this possible, I've already stored a private SSH key (with
   a sensible passphrase) as a lastpass note in the location
   =Personal/github-ssh-key=.

   This also makes use of our [[*Lastpass][lastpass functions]], and hence requires
   that you already have the [[https://github.com/lastpass/lastpass-cli][lpass CLI]] installed.

   To load your keys until 6pm (which, for me, is the end of the
   working day), do =M-x gds-load-github-keys=. If it's after 6pm, or
   you just want to load keys for a different amount of time, do =M-x
   gds-load-github-keys-for= and enter the number of hours of access
   you want when prompted.

   #+BEGIN_SRC emacs-lisp
     (defun gds-load-github-keys-for-seconds (seconds)
       "Load my github keys from lastpass for SECONDS seconds.

     Ensure I'm logged in to lastpass. Then load my github keys from
     Personal/github-ssh-key for one SECONDS seconds."

       (gds-lastpass-ensure-logged-in-and-then
	(lambda ()

	  (let ((keyfile (make-temp-file "gdskeyfile")))

	    (with-temp-file keyfile)
	    (set-file-modes keyfile #o0600)
	    (with-temp-file keyfile
	      (insert (gds-lastpass-get-note "Personal/github-ssh-key")))

	    (when (get-process "ssh-add-github") ; Kill any previous stalled ssh-add attempt
	      (delete-process "ssh-add-github"))

	    (let ((process (start-process-shell-command
			    "ssh-add-github"
			    nil
			    (format "ssh-add -t %d %s" seconds keyfile))))

	      (set-process-filter
	       process
	       (lambda (proc string)
		 (when (string-match-p (regexp-quote "Enter passphrase for") string)
		   (process-send-string proc
					(concat (read-passwd "Key passphrase? ") "\n")))
		 (when (string-match-p (regexp-quote "Identity added") string)
		   (delete-file keyfile)
		   (message "SSH Key successfully loaded")))))))))

     (defun gds-load-github-keys-for (hours)
	 "Load my github keys from lastpass for HOURS hours.

     Use `gds-load-github-keys-for-seconds' to load keys from
     lastpass"
	   (interactive "nHow long for? ")
	   (gds-load-github-keys-for-seconds (* 3600 hours)))

     (defun gds-load-github-keys ()
       "Load my github keys from lastpass until 6pm.

     Calculate how long it'll be until 6pm, then use
     `gds-load-github-keys-for-seconds' to load my keys until then."
       (interactive)

       (let* ((now (current-time))
	      (now-decoded (decode-time now))
	      (eod (if (< emacs-major-version 27)
		       (encode-time 0		    ;Seconds
				    0		    ;Minutes
				    18		    ;Hours
				    (nth 3 now-decoded)  ;Day
				    (nth 4 now-decoded)  ;Month
				    (nth 5 now-decoded)) ;Year
		     (encode-time (list
				   0			  ;Seconds
				   0			  ;Minutes
				   18		  ;Hours
				   (nth 3 now-decoded) ;Day
				   (nth 4 now-decoded) ;Month
				   (nth 5 now-decoded) ;Year
				   (nth 6 now-decoded) ;DOW -- Ignored by encode but whatevs.
				   (nth 7 now-decoded) ;DST
				   (nth 8 now-decoded) ;Zone (UTC offset)
				   )))))
	 (if (time-less-p eod now)
	     (error "Looks like 6pm has been and gone")
	   (let ((timeleft (time-subtract eod now)))
	     (gds-load-github-keys-for-seconds (time-to-seconds timeleft))))))
   #+END_SRC

** Email with Mu4E
*** Installing Mu and Mu4E
    :PROPERTIES:
    :ID:       9d50b9b8-42c4-4ec9-8cd5-98018f69ea38
    :END:
    If we're on a system with =snap= (such as ubuntu), then we can use snap to install
    =maildir-utils=:

    #+begin_src bash :eval never
      sudo snap install maildir-utils
    #+end_src
   
    Then we can load =mu4e= from the snap:

    #+begin_src emacs-lisp
      (if (file-exists-p "/snap/maildir-utils/current/share/emacs/site-lisp/mu4e")
	  (progn
	    (add-to-list 'load-path "/snap/maildir-utils/current/share/emacs/site-lisp/mu4e")
	    (require 'mu4e)))
    #+end_src
*** Installing the Mu4E info page
    :PROPERTIES:
    :ID:       0d08a0c3-4139-4107-9a8b-d0fdfece6f06
    :END:

    If we have the =maildir-utils= snap, then the info page we want is
    in =/snap/maildir-utils/current/share/info=. To access this info
    page, we need to add it to our info index. There are various
    options and steps and [[info:texinfo#Other Info Directories][you can read about them in detail here]].
    
    For our case, we'll start by adding the snap info directory to our
    list of info directories:

    #+begin_src emacs-lisp
      (add-to-list 'Info-directory-list "/snap/maildir-utils/current/share/info")
    #+end_src

    Now we should be able to follow org links like [[info:mu4e][this one]] to the
    info file. However, we won't see Mu4e in the info directory if we
    just hit =C-h i=. For that, we need a =dir= file that contains an
    entry for Mu4e, and we need that dir file /also/ be in a path in
    =Info-directory-list=.

    Annoyingly, there's no =dir= file provided in the snap, so we'll
    have to create one:

    #+begin_src bash :eval never
      install-info /snap/maildir-utils/current/share/info/mu4e.info ~/.emacs.d/info/dir
    #+end_src

    I've checked that dir file into this repo, so you don't have to
    run the same command.

    Now that we have a dir file that points to the right place, we can
    add it to =Info-directory-list=:
    #+begin_src emacs-lisp
      (add-to-list 'Info-directory-list "~/.emacs.d/info")
    #+end_src

    Now we should have access to the Mu4e docs from within emacs. If
    you want to access them from the CLI too, you'll need to add the
    following lines to your =.bashrc= or similar:

    #+begin_src bash :eval never
      export INFOPATH="$INFOPATH:/snap/maildir-utils/current/share/info"
      export INFOPATH="$INFOPATH:$HOME/.emacs.d/info"
    #+end_src
*** Clean up executive emails
    :PROPERTIES:
    :ID:       ddf9a832-e7f9-4e0d-8c89-4aaa19e88e15
    :END:
    A lot of executive emails in outlook seem to be full of tables,
    which get displayed in mu4e as really long space-padded
    lines. This is annoying, and breaks up our paragraphs.

    This function takes a read-only message window, and removes the
    blank spaces at the end of each line.
    #+begin_src emacs-lisp
      (defun gds-clean-exec-email ()
        (interactive)
        (beginning-of-buffer)
        (read-only-mode 0)
        (replace-regexp " *$" "")
        (read-only-mode 1)
        (beginning-of-buffer))
    #+end_src
*** Actual configuration
    :PROPERTIES:
    :ID:       069c68c1-0394-48ee-83ab-7c7639abe835
    :END:

    When viewing html email, we can make =tab= and =backtab= keys
    cycle through hyperlinks.
    #+begin_src emacs-lisp
      (add-hook 'mu4e-view-mode-hook
        (lambda()
          ;; try to emulate some of the eww key-bindings
          (local-set-key (kbd "<tab>") 'shr-next-link)
          (local-set-key (kbd "<backtab>") 'shr-previous-link)))
    #+end_src

    And I like to use a dark theme, so it's worth setting a max
    luminosity for me.

    #+begin_src emacs-lisp
      (setq shr-color-visible-luminance-min 80)
    #+end_src

    #+begin_src emacs-lisp
      (setq mu4e-headers-sort-field :from
            mu4e-headers-sort-direction 'ascending
            mu4e-headers-show-threads t)
    #+end_src

    Mu4e needs you to keep your email in a local maildir folder, so
    I'm not going to try to build a generic config like I did for gnus
    and lastpass above. Instead, let's load local email config from
    another repo if it exists.

    #+begin_src emacs-lisp
      (if (file-exists-p "~/.mu4e-config.org")
	  (org-babel-load-file "~/.mu4e-config.org"))
    #+end_src

    To figure out what to put in there, I refer you to the excellent
    [[info:mu4e][mu4e info page]] that you should now have access to.
** Lastpass
   :PROPERTIES:
   :ID:       0589fc23-8dab-49a5-91f4-5407f946bf47
   :END:

   Of course in order to do anything on the internet, we'll need
   credentials. And storing those in a config file in git would be
   unwise. Let's keep them in lastpass!

   Unhappily, as I write this, the [[https://melpa.org/#/lastpass][lastpass module on melpa]] hasn't
   been updated in over a year, and doesn't seem to work with the
   latest CLI. So we'll have to roll our own for the tiny things we
   want.

   The bare minimum is to be able to log in and out. Let's assume that
   the =lpass= CLI is in the ~$PATH~.

   #+BEGIN_SRC emacs-lisp
     (defun gds-lastpass-ensure-logged-in-and-then (continuation)
       "Ensure the lpass CLI is logged in, then call CONTINUATION.

     Check with `lpass status` if we're logged in. If not, log
     in. Once we're logged in, call CONTINUATION."

       (let ((lpass-status (shell-command-to-string "lpass status --color=never"))) 

	 (when (string-match-p (regexp-quote "Logged in as") lpass-status)
	   (message "Lastpass was already logged in")
	   (funcall continuation))

	 (when (string-match-p (regexp-quote "Not logged in.") lpass-status)

	   (when (get-process "lastpass")	; Kill any previous stalled login attempt
	     (delete-process "lastpass"))

	   ;; Start trying to log in
	   (let* ((username (read-string "Who should we log in to lastpass as? "))
		  (process (start-process-shell-command 
			    "lastpass"
			    nil
			    (concat "LPASS_DISABLE_PINENTRY=1 lpass login "
				    (shell-quote-argument username)))))
	     (set-process-filter
	      process
	      ;; Respond to password and 2fa challenges
	      (lambda (proc string)
		(when (string-match-p (regexp-quote "Master Password") string)
		  (process-send-string proc
				       (concat (read-passwd "Lastpass Master Password? ") "\n")))
		(when (string-match-p (regexp-quote "Code") string)
		  (unless (string-match-p (regexp-quote "out-of-band") string)
		    (process-send-string proc
					 (concat (read-passwd "2FA Code? ") "\n"))))
		(when (string-match-p (regexp-quote "Success") string)
		  (message "Lastpass logged in")
		  (funcall continuation)))))))) ; This needs lexical binding

     (defun gds-lastpass-login ()
       "Ensure the lpass CLI is logged in.

     Check with `lpass status` if we're logged in. If not, log in."
       (interactive)
       (gds-lastpass-ensure-logged-in-and-then (lambda ())))

     (defun gds-lastpass-logout ()
       "Ensure the lpass CLI is logged out."
       (interactive)

       (shell-command "lpass logout -f")
       (message "Lastpass logged out"))

     (defun gds-lastpass-get-note (note-path)
       "Get a secure note from lastpass.

     We must already be logged in to lastpass for this to work. Use
     `gds-lastpass-ensure-logged-in-and-then' to be sure."
       (shell-command-to-string
	(format "lpass show %s --notes" note-path)))
   #+END_SRC
