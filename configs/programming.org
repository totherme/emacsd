#+STARTUP: fnadjust
#+OPTIONS: f:t

* Programming
  :PROPERTIES:
  :ID:       6f01c069-87cb-4a86-a2f9-3674c7268dee
  :END:

  Use [[http://www.flycheck.org/en/latest/][flycheck]] for on-the-fly type checking.

  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
	:ensure t
	:delight
	:commands flycheck-mode)
  #+END_SRC

  Use [[https://company-mode.github.io/][company mode]] for autocompletion of All The Things. Tweak a few
  parameters while we're at it:
  - Summon autocompletion with ~C-c C-n~ or ~C-c M-n~.
  - Have the autocompletion popup appear in 0.2 seconds rather than the default 0.5 seconds.
    + Except when we're writing plain text -- that would just be
      irritating. In plain text files, we can always summon
      autocompletion explicitly if we want..
  - Make the autocompletion popup bigger -- show 20 candidates at a time instead of 10.
  #+BEGIN_SRC emacs-lisp
    (use-package company
      :ensure t
      :delight
      :commands global-company-mode
      :init
      (add-hook 'after-init-hook 'global-company-mode)
      :config
      (global-set-key (kbd "C-c C-n") 'company-complete)
      (global-set-key (kbd "C-c M-n") 'company-complete)
      (setq company-idle-delay .2)
      (add-hook 'text-mode-hook (lambda () 
				  (set (make-local-variable 'company-idle-delay) nil))))
      (setq company-tooltip-limit 20)
  #+END_SRC

  Use [[https://github.com/joaotavora/yasnippet][the YASnippet template system]] for typing common things (boilerplate, etc) in various languages.
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :ensure t
      :delight
      :init
      (add-hook 'after-init-hook 'yas-global-mode))  
  #+END_SRC

  Use [[https://github.com/wbolster/emacs-direnv][direnv mode]] for keeping environment variables in separate
  projects separate from each other.
  #+begin_src emacs-lisp
    (use-package direnv
      :ensure t
      :config
      (direnv-mode))
  #+end_src

** Git
   :PROPERTIES:
   :ID:       677e9d86-2f44-45d7-bc50-c24c8663495d
   :END:

   Git gutter shows me what has changed, and what hasn't in a source file.
   #+begin_src emacs-lisp
     (use-package git-gutter
       :ensure t
       :commands global-git-gutter-mode
       :delight
       :init
       (add-hook 'after-init-hook 'global-git-gutter-mode))
   #+end_src

   Git link lets me grab a github link for the line at point
   #+begin_src emacs-lisp
     (use-package git-link
       :ensure t
       :config
       (global-set-key (kbd "C-c g l") 'git-link))
   #+end_src
** Compilation
   :PROPERTIES:
   :ID:       8526b5cd-97dc-4f47-9678-dedde43009bb
   :END:
   Compilation buffers aren't coloured by default. This means ginkgo
   output is almost impossible to read. Let's try to fix that.

   #+BEGIN_SRC emacs-lisp
     (require 'ansi-color)
     (defun colorize-compilation-buffer ()
       (read-only-mode nil)
       (ansi-color-apply-on-region compilation-filter-start (point))
       (read-only-mode t))
     (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
   #+END_SRC
** Searching
   
** Docker
   :PROPERTIES:
   :ID:       fa02224e-c82b-4dc6-bdd9-c3d1c5644469
   :END:
   #+begin_src emacs-lisp
     (use-package docker
       :ensure t
       :bind ("C-c d" . docker))

     (use-package docker-compose-mode
       :ensure t)
   #+end_src
*** Dockerfiles
    :PROPERTIES:
    :ID:       081ea326-8bcf-442f-9a37-deb7f8ac7e37
    :END:
    #+begin_src emacs-lisp
      (use-package dockerfile-mode
        :ensure t)
    #+end_src
** Shell Scripting
   :PROPERTIES:
   :ID:       48c75d72-7cd3-42a3-9245-2e8d14ec6963
   :END:
   If [[https://www.shellcheck.net/][shellcheck]] is in the ~$PATH~, we can use it with flycheck.
   #+BEGIN_SRC emacs-lisp
   (add-hook 'sh-mode-hook 'flycheck-mode)
   #+END_SRC

** Elisp
   :PROPERTIES:
   :ID:       0236879d-2823-406c-aa10-472496f45918
   :END:
   Use paredit to make it harder to accidentally write syntactically
   incorrect lisp.
   #+BEGIN_SRC emacs-lisp
     (use-package paredit
       :ensure t
       :delight
       :commands paredit-mode
       :init
       (add-hook 'emacs-lisp-mode-hook 'paredit-mode))
   #+END_SRC

   Use rainbow-parens to make it easier to read the lisp we're writing

   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-delimiters
       :ensure t
       :delight
       :commands rainbow-delimiters-mode
       :init
       (add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode))
   #+END_SRC

** Golang

*** Basics
    :PROPERTIES:
    :ID:       c8296307-325d-462d-8f30-33433e932c42
    :END:
    The emacs [[https://github.com/dominikh/go-mode.el][go mode]] will provide a bunch of useful things on its own. Including:
    - integration with ~gofmt~
    - integration with ~godoc~
    - integration the Playground
    - automatic import management
    - code introspection with ~godef~
    - test coverage displays
    - various handy code navigation shortcuts
    - semi-automatic ~$GOPATH~ detection -- call ~M-x go-set-project~
      if you think your ~$GOPATH~ isn't currently set right.
    #+BEGIN_SRC emacs-lisp
      ;; Setup all the golang magic
      (use-package go-mode
	:ensure t)
    #+END_SRC

    Use goimports instead of gofmt. It's just better.
    #+BEGIN_SRC emacs-lisp
      (setq gofmt-command "goimports")
    #+END_SRC
    ...and gofmt when we save
    #+BEGIN_SRC emacs-lisp
      (add-hook 'before-save-hook 'gofmt-before-save)
    #+END_SRC

    [[https://github.com/dominikh/yasnippet-go][YASnippet-go]] is a collection of snippets for go dev. They're
    submoduled into this repo, and we enable them like so:
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'yas-snippet-dirs  "~/.emacs.d/yasnippet-go")
    #+END_SRC

    
*** GOPATH wrangling
    :PROPERTIES:
    :ID:       3ad33aca-715f-4f02-946f-9dec3b3785f4
    :END:

    If you start emacs from a shell which has a ~$GOPATH~ already set
    in it, we'll just use that. However, sometimes when emacs is
    started from OSX Finder or a Linux window manager, the environment
    isn't properly set up for go development. So, if we detect that
    there's no ~$GOPATH~ set, we'll use [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] to grab
    it, and the ~$PATH~ variable too.
    #+BEGIN_SRC emacs-lisp
      (unless (getenv "GOPATH")
	(use-package exec-path-from-shell
	  :ensure t
	  :delight
	  :config
	  (exec-path-from-shell-initialize)
	  (exec-path-from-shell-copy-env "GOPATH")
	  (exec-path-from-shell-copy-env "PATH")))
    #+END_SRC

    Notice that we only do this if the ~$GOPATH~ is currently
    unset. If you want to use [[https://direnv.net/][direnv]] to set a different ~$PATH~ and
    ~$GOPATH~ for every different project in your home dir, then
    that's fine -- you can start a separate emacs in each project, and
    they'll all have the ~$GOPATH~ and ~$PATH~ variables you expected.

    However, it's often useful to have a single [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Command-History.html][command history]], [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Kill-Ring.html][kill
    ring]], and so on for all your projects. For this reason, you might
    like to try just opening a single emacs, and using ~M-x
    go-set-project~ to manage your ~$GOPATH~.

*** Key and Mouse Bindings
    :PROPERTIES:
    :ID:       387b269b-6535-41f6-b663-e61a0c0cccdb
    :END:
    We need a little setup to enable IDE-like control-click for code
    introspection. First a function to move the cursor to where you
    just clicked, and then perform the introspection.
    #+BEGIN_SRC emacs-lisp
      (defun my-golang-introspect (event)
	"Move the point to the mouse, and try to do godef-jump.

	For IDE-like code introspection on mouse events like Control-Click"
	(interactive "e")
	(mouse-set-point event)
	(godef-jump (point)))
    #+END_SRC

    Unfortunately there is already a function globally bound to the
    mouse-down portion of control-click. When we try to bind our
    introspection function to the whole click, this mouse-down
    function will get in the way. We're going to want to keep it for
    everything except golang buffers, so we'll have to overwrite it
    locally with something harmless.
    #+BEGIN_SRC emacs-lisp
      (defun my-do-nothing ()
	(interactive))
    #+END_SRC

    Now actually bind the keys:
    - Use ~C-c m~ to manually trigger a go format (otherwise it'll happen automatically on save anyway)
    - Use ~C-c C-e~ to ask what compile error is under point.
    - Use ~M-.~ (which means ~Alt-.~ on practically all keyboards
      these days) or Control-Click for code introspection ("go to definition").
    #+BEGIN_SRC emacs-lisp
      (defun my-go-keybindings ()
	(local-set-key (kbd "C-c m") 'gofmt)
	(local-set-key (kbd "M-.") 'godef-jump)
	(local-set-key (kbd "C-<mouse-1>") 'my-golang-introspect)
	(local-set-key (kbd "C-<down-mouse-1>") 'my-do-nothing))
      (add-hook 'go-mode-hook 'my-go-keybindings)
    #+END_SRC

*** Autocompletion
    :PROPERTIES:
    :ID:       f0839e51-f95b-4cb4-829b-a5f2798f21ca
    :END:
    Use the gopls integration (LSP mode) in go-mode for autocompletion and so on.

    #+begin_src emacs-lisp
      (add-hook 'go-mode-hook 'lsp-deferred)
    #+end_src

*** Testing
    :PROPERTIES:
    :ID:       5223d219-4d04-4e40-b2fd-8a33782a6da4
    :END:
    We can use [[https://github.com/nlamirault/gotest.el][gotest]] to run tests in a fine-grained way.
    #+BEGIN_SRC emacs-lisp
      (use-package gotest
	:ensure t
	:delight)
    #+END_SRC

    The gotest home page suggests the following keybindings. I'm
    ignoring the suggested benchmark keybinding (~C-x b~) because it
    clashes with ~switch-to-buffer~.
    #+BEGIN_SRC emacs-lisp
      (define-key go-mode-map (kbd "C-x f") 'go-test-current-file)
      (define-key go-mode-map (kbd "C-x t") 'go-test-current-test)
      (define-key go-mode-map (kbd "C-x p") 'go-test-current-project)
      (define-key go-mode-map (kbd "C-x x") 'go-run)
      (define-key go-mode-map (kbd "C-x c") 'go-test-current-coverage)
    #+END_SRC
** Rust
   :PROPERTIES:
   :ID:       07a52487-bcd7-417d-8258-e17acdda874d
   :END:
   #+begin_src emacs-lisp
     (use-package rust-mode
       :ensure t)
   #+end_src
** Markdown
   :PROPERTIES:
   :ID:       e14e1adc-97cd-4b26-8ede-7f71ee795c08
   :END:

   Use [[https://jblevins.org/projects/markdown-mode/][markdown mode]] for editing markdown. 
   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode
       :ensure t)
   #+END_SRC

** YAML
   :PROPERTIES:
   :ID:       23533b15-b0b1-47e3-b6c6-a5bf643feaf5
   :END:

   Use [[https://www.emacswiki.org/emacs/YamlMode][yaml mode]] for editing yaml.
   #+BEGIN_SRC emacs-lisp
     (use-package yaml-mode
       :ensure t)   
   #+END_SRC

   Use [[https://gitlab.com/emacs-stuff/indent-tools/][indent-tools]] for YAML folding
   #+begin_src emacs-lisp
     (use-package indent-tools
       :ensure t)
     (global-set-key (kbd "C-c >") 'indent-tools-hydra/body)
   #+end_src

   Maybe we'll only want that binding in YAML mode (or yaml and
   python? And haskell...?) in future, but for now, let's make it
   global.

** JSON
   :PROPERTIES:
   :ID:       c4a80f6e-f126-4bfc-a9bb-a66be12b2111
   :END:

   Use [[https://github.com/joshwnj/json-mode][json mode]] for editing json.
   #+BEGIN_SRC emacs-lisp
     (use-package json-mode
       :ensure t)
   #+END_SRC

** Ruby
   :PROPERTIES:
   :ID:       f412ddeb-eab6-4b8f-bf42-c9a227ac79d2
   :END:

   Use [[https://github.com/zenspider/enhanced-ruby-mode][enhanced ruby mode]] for better colouring and syntax checking.
   #+BEGIN_SRC emacs-lisp
     (use-package enh-ruby-mode
       :ensure t)

     (add-to-list 'auto-mode-alist
		  '("\\(?:\\.rb\\|ru\\|rake\\|thor\\|jbuilder\\|gemspec\\|podspec\\|/\\(?:Gem\\|Rake\\|Cap\\|Thor\\|Vagrant\\|Guard\\|Pod\\)file\\)\\'" . enh-ruby-mode))
   #+END_SRC

   Use [[https://github.com/pd/yard-mode.el][yard mode]] for handling [[https://yardoc.org/][ruby yardocs]].

   #+BEGIN_SRC emacs-lisp
     (use-package yard-mode
       :ensure t
       :delight)

     (add-hook 'enh-ruby-mode-hook 'yard-mode)
   #+END_SRC

   Use [[https://github.com/bbatsov/rubocop][rubocop]] for on-the-fly linting.
   #+BEGIN_SRC emacs-lisp
     (use-package rubocop
       :ensure t
       :delight)
     (add-hook 'enh-ruby-mode-hook 'rubocop-mode)
   #+END_SRC

   Use [[https://github.com/dgutov/robe][robe mode]] for IDE-like features.
   #+BEGIN_SRC emacs-lisp
     (use-package robe
       :ensure t
       :delight)

     (add-hook 'enh-ruby-mode-hook 'robe-mode)
   #+END_SRC

   From the robe readme, note these dependencies:

   #+BEGIN_QUOTE
   - pry
   - pry-doc >= 0.6.0 (on MRI)
   - method_source >= 0.8.2 (for compatibility with the latest Rubinius)
   Note that if your project is using Bundler, the dependencies have to be added to the Gemfile.
   #+END_QUOTE

   Use robe-mode's autocompletion kit with the company autocompletion
   framework we set up earlier.

   #+BEGIN_SRC emacs-lisp
     (eval-after-load 'company
       '(push 'company-robe company-backends))
   #+END_SRC

*** Mouse bindings
    :PROPERTIES:
    :ID:       185b8b70-58f5-4774-b05c-1ae1970239d0
    :END:
    Just as in golang, we can bind control-click to code introspection.

    #+BEGIN_SRC emacs-lisp
      (defun my-ruby-introspect (event)
	"Move the point to the mouse, and try to do robe-jump.

	 For IDE-like code introspection on mouse events like Control-Click"
	(interactive "e")
	(mouse-set-point event)
	(robe-jump (point)))

      (defun my-ruby-keybindings ()
	      (local-set-key (kbd "C-<mouse-1>") 'my-ruby-introspect)
	      (local-set-key (kbd "C-<down-mouse-1>") 'my-do-nothing))
      (add-hook 'enh-ruby-mode-hook 'my-ruby-keybindings)

    #+END_SRC

**** TODO Reduce code duplication
     The same trick is described both here and in the golang
     section. Extract it.

** Haskell
   :PROPERTIES:
   :ID:       f8e5f705-e252-45b4-904d-1b2a0de0b920
   :END:
   First, we'll definitely need the basic haskell mode that other
   haskell goodies are built on.
   #+BEGIN_SRC emacs-lisp
     (use-package haskell-mode
       :ensure t)
   #+END_SRC

   Now we want some IDE-like features. I used to use [[http://commercialhaskell.github.io/intero/][Intero]] for
   stack[fn:1], and [[https://github.com/jyp/dante][Dante]] for casual scripting with ghci or just
   cabal[fn:2]. However, it looks like Intero hasn't been updated for
   a couple of years (the [[https://travis-ci.org/github/chrisdone/intero/jobs/641672495][last CI run]] seems to have been 2 years ago)
   and has vanished from melpa.

*** Dante
    :PROPERTIES:
    :ID:       7ae3009c-e954-4f37-80be-6a6eba5ece76
    :END:
    This snippit is copied verbatim from the [[https://github.com/jyp/dante][Dante README]].

    #+BEGIN_SRC emacs-lisp
      (use-package dante
       	:ensure t
       	:after haskell-mode
       	:commands 'dante-mode
       	:init
       	(add-hook 'haskell-mode-hook 'dante-mode)
       	(add-hook 'haskell-mode-hook 'flycheck-mode))
    #+END_SRC

    ...and we can activate the [[https://hackage.haskell.org/package/hlint][hlint]] checker too.

    #+BEGIN_SRC emacs-lisp
      (add-hook 'dante-mode-hook
         '(lambda () (flycheck-add-next-checker 'haskell-dante
                      '(warning . haskell-hlint))))
    #+END_SRC

** Nix
[[https://nixos.org/][Nix]] is a tool for managing installations and configurations.
#+begin_src emacs-lisp
    (use-package nix-mode
      :ensure t
      :mode "\\.nix\\'")
#+end_src
** LSP
LSP stands for "[[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]]", and was popularised by
VSCode. From our perspective, it'll allow us to use all the
language-specific magic that you get in IDEs like VSCode.

#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :commands lsp
    :diminish lsp-mode
    :hook
    (elixir-mode . lsp)
    :init
    (add-to-list 'exec-path "~/.nix-profile/bin/"))
#+end_src
** Elixir
A modern ruby-like language on the erlang beam VM
#+begin_src emacs-lisp
  (use-package elixir-mode
    :ensure t)
#+end_src
** Terraform

Use the LSP, and turn on everything that's recommended [[https://emacs-lsp.github.io/lsp-mode/page/lsp-terraform-ls/][here]].
#+begin_src emacs-lisp
  (use-package terraform-mode
    :ensure t)

  (add-hook 'terraform-mode-hook 'terraform-format-on-save-mode)
  (add-hook 'terraform-mode-hook 'lsp)

  (use-package company-terraform
    :ensure t)

  (setq lsp-terraform-ls-enable-show-reference t)

  (setq lsp-semantic-tokens-enable t)
  (setq lsp-semantic-tokens-honor-refresh-requests t)
  (setq lsp-enable-links t)
  (setq lsp-terraform-ls-prefill-required-fields t)

  (use-package lsp-treemacs
    :ensure t)
#+end_src

I also want tflint to run. Annoyingly, the LSP steals the attention of
emacs' flycheck, and prevents it from running =terraform-tflint=. So,
I want to:
- Configure flycheck explicitly to use =terraform-tflint=
- Tell flycheck to run the =lsp= linter after =terraform-tflint=

#+begin_src emacs-lisp
  (defun gds-setup-terraform-editing ()
    "Set up the terraform bits we want when editing TF stuff"
    (interactive)
    (lsp)
    (terraform-format-on-save-mode)
    (flycheck-add-next-checker 'terraform-tflint 'lsp)
    (setq-local flycheck-checker 'terraform-tflint))

  (add-hook 'terraform-mode-hook 'gds-setup-terraform-editing)

#+end_src
** Kubernetes
#+begin_src emacs-lisp
  (use-package k8s-mode
    :ensure t)
  (use-package kubernetes
    :ensure t)
  (fset 'k8s 'kubernetes-overview)
  ;; (use-package kele
  ;;   :ensure t)
  ;; (bind-key (kbd "s-k") kele-command-map kele-mode-map)
#+end_src
** Ag, the Silver Searcher

#+begin_src emacs-lisp
  (use-package ag
    :ensure t)
#+end_src

** Typescript
#+begin_src emacs-lisp
  (use-package tide
    :ensure t)
  (use-package typescript-mode
    :ensure t)
#+end_src

** AI Helpers

*** Org-AI
See [[https://github.com/rksm/org-ai][this github page]]. A general purpose AI assistant that uses
org-mode and org-like hooks to try to be helpful when asked.  Does not
appear to be a co-pilot-like autocompleter for moment-to-moment
coding.

[[help:Package][The docs for org-ai]] say I need at least this much config:

#+begin_src emacs-lisp
  (use-package org-ai
    :ensure t
    :commands (org-ai-mode org-ai-global-mode)
    :init
    (add-hook 'org-mode-hook #'org-ai-mode)
    (setq org-ai-default-chat-model "gpt-4o")
    (org-ai-global-mode))
#+end_src

...and also an OpenAI API key in my =~/.authinfo.gpg= file of the form:
#+begin_src text
  machine api.openai.com login org-ai password <your-api-key>
#+end_src

Now it ought to be possible to use AI blocks in org:

#+begin_ai
Tell me about the relationship between emacs and bash users?

[AI]: Emacs and Bash users often have a complementary relationship, as both tools are commonly used in Unix-like environments, and they cater to distinct but overlapping use cases.

1. **Text Editing vs. Command Line**: 
   - Emacs is a highly extensible text editor, favored for its powerful editing capabilities, support for various programming languages, and extensible environment through Emacs Lisp. Users appreciate its features like syntax highlighting, code folding, and comprehensive project management.
   - Bash, on the other hand, is a command line shell and scripting language used for command execution and app management. Bash users typically focus on automating tasks, running commands, and managing systems efficiently.

2. **Integration**: 
   - Many Emacs users leverage shell features within Emacs itself. Emacs has a built-in terminal emulator (`eshell`) and support for running shell commands directly, allowing users to stay within the Emacs ecosystem while still executing Bash commands.
   - Users can run scripts or shell command prompts in Emacs buffers, which can enhance productivity by reducing context switching between applications.

3. **Customization and Scripting**: 
   - Emacs can be configured extensively using Emacs Lisp, which allows users to create scripts and extensions. Bash users, similarly, often write shell scripts to automate tasks. The two communities value scripting and customization, albeit in different contexts.

4. **Shared User Base**: 
   - There is significant overlap between Emacs and Bash users, particularly among developers, system administrators, and power users of Unix/Linux systems. Users familiar with Bash often utilize Emacs for coding or writing, while those who prefer Emacs may also use Bash for managing their systems or automating tasks.

5. **Community and Culture**: 
   - Both have strong communities that appreciate open-source tools and philosophies. Users often share configurations, tips, and packages that enhance the capabilities of both environments.

In essence, while Emacs and Bash serve different primary functions—one for text editing and the other for command line interaction—they often work well together and are embraced by users who value efficiency and control in their workflows.

[ME]: 
#+end_ai

*** Copilot-emacs

See [[https://github.com/copilot-emacs/copilot.el][this github page]].

First we need "straight", because for now (until emacs 30) that's the best way to install this thing.

#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name
        "straight/repos/straight.el/bootstrap.el"
        (or (bound-and-true-p straight-base-dir)
            user-emacs-directory)))
      (bootstrap-version 7))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

Now we can get copilot mode:

#+begin_src emacs-lisp
  (use-package copilot
    :straight (:host github :repo "copilot-emacs/copilot.el" :files ("*.el"))
    :ensure t)

  (add-hook 'prog-mode-hook 'copilot-mode)
  (add-hook 'text-mode-hook 'copilot-mode)

  (global-set-key (kbd "C-<tab>") 'copilot-accept-completion)
#+end_src

This also needed a =M-x copilot-install-server= and a =M-x copilot-login=.

*** Aider

We install [[https://aider.chat/][aider]] with nix, then connect to it with [[https://github.com/tninja/aider.el][this emacs package]].

#+begin_src emacs-lisp
  (use-package aider
    :straight (:host github :repo "tninja/aider.el" :files ("aider.el"))
    :config
    (setq aider-args '("--model" "gpt-4o"))
    (global-set-key (kbd "C-c a") 'aider-transient-menu))
#+end_src
* Footnotes

[fn:1] For example, if your stack project has different targets with
different build-depends lines, then intero can understand which
imports are available in any/all of them using ~M-x intero-targets~.

[fn:2] Intero doesn't work at all without stack. Dante does.

